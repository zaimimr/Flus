// This file is auto-generated by @hey-api/openapi-ts

/**
 * AccountSerializer.
 */
export type Account = {
    /**
     * The ID of this Account, used to refer to this account in other API calls.
     */
    readonly id?: string;
    /**
     * The date & time at which the account object was created.
     */
    readonly created?: string;
    /**
     * The date & time at which the account object was last accessed.
     */
    readonly last_accessed?: string;
    /**
     * The Account IBAN
     */
    readonly iban?: string;
    /**
     * The Account BBAN
     */
    readonly bban?: string;
    /**
     * The processing status of this account.
     */
    readonly status?: string;
    /**
     * The ASPSP associated with this account.
     */
    readonly institution_id?: string;
    /**
     * The name of the account owner.
     */
    readonly owner_name?: string;
};

/**
 * AccountBalanceSerializer.
 */
export type AccountBalance = {
    balances?: Array<BalanceSchema>;
};

/**
 * AccountDetailSerializer.
 */
export type AccountDetail = {
    /**
     * account
     */
    account: (DetailSchema);
};

/**
 * AccountSchema.
 */
export type AccountSchema = {
    /**
     * iban
     */
    iban?: string;
    /**
     * bban
     */
    bban?: string;
    /**
     * pan
     */
    pan?: string;
    /**
     * maskedPan
     */
    maskedPan?: string;
    /**
     * msisdn
     */
    msisdn?: string;
    /**
     * currency
     */
    currency?: string;
};

/**
 * AccountTransactionsSerializer.
 */
export type AccountTransactions = {
    /**
     * transactions
     */
    transactions: (BankTransaction);
};

/**
 * BalanceAmountSchema.
 */
export type BalanceAmountSchema = {
    /**
     * amount
     */
    amount: string;
    /**
     * currency
     */
    currency: string;
};

/**
 * BalanceSchema.
 */
export type BalanceSchema = {
    /**
     * balanceAmount
     */
    balanceAmount: (BalanceAmountSchema);
    /**
     * balanceType
     */
    balanceType: string;
    /**
     * creditLimitIncluded
     */
    creditLimitIncluded?: boolean;
    /**
     * lastChangeDateTime
     */
    lastChangeDateTime?: string;
    /**
     * referenceDate
     */
    referenceDate?: string;
    /**
     * lastCommittedTransaction
     */
    lastCommittedTransaction?: string;
};

/**
 * BankTransactionSerializer.
 */
export type BankTransaction = {
    booked: Array<TransactionSchema>;
    pending?: Array<TransactionSchema>;
};

/**
 * CurrencyExchangeSchema.
 */
export type CurrencyExchangeSchema = {
    /**
     * sourceCurrency
     */
    sourceCurrency?: string;
    /**
     * exchangeRate
     */
    exchangeRate?: string;
    /**
     * unitCurrency
     */
    unitCurrency?: string;
    /**
     * targetCurrency
     */
    targetCurrency?: string;
    /**
     * quotationDate
     */
    quotationDate?: string;
    /**
     * contractIdentification
     */
    contractIdentification?: string;
};

/**
 * DetailSchema.
 */
export type DetailSchema = {
    /**
     * resourceId
     */
    resourceId?: string;
    /**
     * iban
     */
    iban?: string;
    /**
     * bban
     */
    bban?: string;
    /**
     * SortCodeAccountNumber returned by some UK banks (6 digit Sort Code and 8 digit Account Number)
     */
    scan?: string;
    /**
     * msisdn
     */
    msisdn?: string;
    /**
     * currency
     */
    currency?: string;
    /**
     * ownerName
     */
    ownerName?: string;
    /**
     * name
     */
    name?: string;
    /**
     * displayName
     */
    displayName?: string;
    /**
     * product
     */
    product?: string;
    /**
     * cashAccountType
     */
    cashAccountType?: string;
    /**
     * status
     */
    status?: string;
    /**
     * bic
     */
    bic?: string;
    /**
     * linkedAccounts
     */
    linkedAccounts?: string;
    /**
     * maskedPan
     */
    maskedPan?: string;
    /**
     * usage
     */
    usage?: string;
    /**
     * details
     */
    details?: string;
    /**
     * ownerAddressUnstructured
     */
    ownerAddressUnstructured?: Array<(string)>;
    /**
     * ownerAddressStructured
     */
    ownerAddressStructured?: (OwnerAddressStructuredSchema);
};

/**
 * Represents end-user details.
 */
export type EnduserAcceptanceDetailsRequest = {
    user_agent: string;
    ip_address: string;
};

/**
 * Represents an end-user agreement.
 */
export type EndUserAgreement = {
    /**
     * The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
     */
    readonly id?: string;
    /**
     * The date & time at which the end user agreement was created.
     */
    readonly created?: string;
    /**
     * an Institution ID for this EUA
     */
    institution_id: string;
    /**
     * Maximum number of days of transaction data to retrieve.
     */
    max_historical_days?: number;
    /**
     * Number of days from acceptance that the access can be used.
     */
    access_valid_for_days?: number;
    /**
     * Array containing one or several values of ['balances', 'details', 'transactions']
     */
    access_scope?: Array<unknown>;
    /**
     * The date & time at which the end user accepted the agreement.
     */
    readonly accepted?: (string) | null;
};

/**
 * Represents an end-user agreement.
 */
export type EndUserAgreementRequest = {
    /**
     * an Institution ID for this EUA
     */
    institution_id: string;
    /**
     * Maximum number of days of transaction data to retrieve.
     */
    max_historical_days?: number;
    /**
     * Number of days from acceptance that the access can be used.
     */
    access_valid_for_days?: number;
    /**
     * Array containing one or several values of ['balances', 'details', 'transactions']
     */
    access_scope?: Array<unknown>;
};

export type ErrorResponse = {
    summary: string;
    detail: string;
    type?: string;
    status_code: number;
};

/**
 * Represents an Integration.
 */
export type Integration = {
    id: string;
    name: string;
    bic?: string;
    transaction_total_days?: string;
    max_access_valid_for_days?: string;
    countries: Array<(string)>;
    logo: string;
};

/**
 * IntegrationSerializer for Retrieve endpoint.
 */
export type IntegrationRetrieve = {
    id: string;
    name: string;
    bic?: string;
    transaction_total_days?: string;
    max_access_valid_for_days?: string;
    countries: Array<(string)>;
    logo: string;
    supported_payments: {
        [key: string]: unknown;
    };
    supported_features: Array<unknown>;
    identification_codes: Array<unknown>;
};

/**
 * Obtain JWT pair.
 */
export type JWTObtainPairRequest = {
    /**
     * Secret id from /user-secrets/
     */
    secret_id: string;
    /**
     * Secret key from /user-secrets/
     */
    secret_key: string;
};

/**
 * Refresh access token.
 */
export type JWTRefreshRequest = {
    refresh: string;
};

/**
 * OwnerAddressStructuredSchema.
 */
export type OwnerAddressStructuredSchema = {
    /**
     * streetName
     */
    streetName?: string;
    /**
     * buildingNumber
     */
    buildingNumber?: string;
    /**
     * townName
     */
    townName?: string;
    /**
     * postCode
     */
    postCode?: string;
    /**
     * country
     */
    country?: string;
};

export type PaginatedEndUserAgreementList = {
    count: number;
    next?: (string) | null;
    previous?: (string) | null;
    results: Array<EndUserAgreement>;
};

export type PaginatedRequisitionList = {
    count: number;
    next?: (string) | null;
    previous?: (string) | null;
    results: Array<Requisition>;
};

/**
 * RequisitionSerializer.
 */
export type Requisition = {
    readonly id?: string;
    /**
     * The date & time at which the requisition was created.
     */
    readonly created?: (string) | null;
    /**
     * redirect URL to your application after end-user authorization with ASPSP
     */
    redirect: (string) | null;
    /**
     * status of this requisition
     */
    readonly status?: (StatusEnum);
    /**
     * an Institution ID for this Requisition
     */
    institution_id: string;
    /**
     * EUA associated with this requisition
     */
    agreement?: string;
    /**
     * additional ID to identify the end user
     */
    reference?: string;
    /**
     * array of account IDs retrieved within a scope of this requisition
     */
    readonly accounts?: Array<(string)>;
    /**
     * A two-letter country code (ISO 639-1)
     */
    user_language?: string;
    /**
     * link to initiate authorization with Institution
     */
    readonly link?: string;
    /**
     * optional SSN field to verify ownership of the account
     */
    ssn?: string;
    /**
     * option to enable account selection view for the end user
     */
    account_selection?: boolean;
    /**
     * enable redirect back to the client after account list received
     */
    redirect_immediate?: boolean;
};

/**
 * RequisitionSerializer.
 */
export type RequisitionRequest = {
    /**
     * redirect URL to your application after end-user authorization with ASPSP
     */
    redirect: (string) | null;
    /**
     * an Institution ID for this Requisition
     */
    institution_id: string;
    /**
     * EUA associated with this requisition
     */
    agreement?: string;
    /**
     * additional ID to identify the end user
     */
    reference?: string;
    /**
     * A two-letter country code (ISO 639-1)
     */
    user_language?: string;
    /**
     * optional SSN field to verify ownership of the account
     */
    ssn?: string;
    /**
     * option to enable account selection view for the end user
     */
    account_selection?: boolean;
    /**
     * enable redirect back to the client after account list received
     */
    redirect_immediate?: boolean;
};

/**
 * Obtain new JWT pair.
 */
export type SpectacularJWTObtain = {
    /**
     * Your access token
     */
    readonly access?: string;
    /**
     * Access token expires in seconds
     */
    readonly access_expires?: number;
    /**
     * Your refresh token
     */
    readonly refresh?: string;
    /**
     * Refresh token expires in seconds
     */
    readonly refresh_expires?: number;
};

/**
 * Refresh Access token.
 */
export type SpectacularJWTRefresh = {
    /**
     * Your access token
     */
    readonly access?: string;
    /**
     * Access token expires in seconds
     */
    readonly access_expires?: number;
};

/**
 * Create requisition.
 */
export type SpectacularRequisition = {
    readonly id?: string;
    /**
     * The date & time at which the requisition was created.
     */
    readonly created?: (string) | null;
    /**
     * redirect URL to your application after end-user authorization with ASPSP
     */
    redirect: (string) | null;
    /**
     * status of this requisition
     */
    readonly status?: (StatusEnum);
    /**
     * an Institution ID for this Requisition
     */
    institution_id: string;
    /**
     * EUA associated with this requisition
     */
    agreement?: string;
    /**
     * additional ID to identify the end user
     */
    reference?: string;
    /**
     * array of account IDs retrieved within a scope of this requisition
     */
    readonly accounts?: Array<unknown>;
    /**
     * A two-letter country code (ISO 639-1)
     */
    user_language?: string;
    /**
     * link to initiate authorization with Institution
     */
    readonly link?: string;
    /**
     * optional SSN field to verify ownership of the account
     */
    ssn?: string;
    /**
     * option to enable account selection view for the end user
     */
    account_selection?: boolean;
    /**
     * enable redirect back to the client after account list received
     */
    redirect_immediate?: boolean;
};

export type StatusEnum = 'CR' | 'ID' | 'LN' | 'RJ' | 'ER' | 'SU' | 'EX' | 'GC' | 'UA' | 'GA' | 'SA';

/**
 * TransactionAmountSchema.
 */
export type TransactionAmountSchema = {
    /**
     * amount
     */
    amount: string;
    /**
     * currency
     */
    currency: string;
};

/**
 * TransactionSchema.
 */
export type TransactionSchema = {
    /**
     * transactionId
     */
    transactionId?: string;
    /**
     * entryReference
     */
    entryReference?: string;
    /**
     * endToEndId
     */
    endToEndId?: string;
    /**
     * mandateId
     */
    mandateId?: string;
    /**
     * checkId
     */
    checkId?: string;
    /**
     * creditorId
     */
    creditorId?: string;
    /**
     * bookingDate
     */
    bookingDate?: string;
    /**
     * valueDate
     */
    valueDate?: string;
    /**
     * bookingDateTime
     */
    bookingDateTime?: string;
    /**
     * valueDateTime
     */
    valueDateTime?: string;
    /**
     * transactionAmount
     */
    transactionAmount: (TransactionAmountSchema);
    currencyExchange?: Array<CurrencyExchangeSchema>;
    /**
     * creditorName
     */
    creditorName?: string;
    /**
     * creditorAccount
     */
    creditorAccount?: (AccountSchema);
    /**
     * ultimateCreditor
     */
    ultimateCreditor?: string;
    /**
     * debtorName
     */
    debtorName?: string;
    /**
     * debtorAccount
     */
    debtorAccount?: (AccountSchema);
    /**
     * ultimateDebtor
     */
    ultimateDebtor?: string;
    /**
     * remittanceInformationUnstructured
     */
    remittanceInformationUnstructured?: string;
    /**
     * remittanceInformationUnstructuredArray
     */
    remittanceInformationUnstructuredArray?: Array<(string)>;
    /**
     * remittanceInformationStructured
     */
    remittanceInformationStructured?: string;
    /**
     * remittanceInformationStructuredArray
     */
    remittanceInformationStructuredArray?: Array<(string)>;
    /**
     * additionalInformation
     */
    additionalInformation?: string;
    /**
     * purposeCode
     */
    purposeCode?: string;
    /**
     * bankTransactionCode
     */
    bankTransactionCode?: string;
    /**
     * proprietaryBankTransactionCode
     */
    proprietaryBankTransactionCode?: string;
    /**
     * internalTransactionId
     */
    internalTransactionId?: string;
};

export type RetrieveAccountMetadataData = {
    path: {
        id: string;
    };
};

export type RetrieveAccountMetadataResponse = (Account);

export type RetrieveAccountMetadataError = (ErrorResponse);

export type RetrieveAccountBalancesData = {
    path: {
        id: string;
    };
};

export type RetrieveAccountBalancesResponse = (AccountBalance);

export type RetrieveAccountBalancesError = (ErrorResponse);

export type RetrieveAccountDetailsData = {
    path: {
        id: string;
    };
};

export type RetrieveAccountDetailsResponse = (AccountDetail);

export type RetrieveAccountDetailsError = (ErrorResponse);

export type RetrieveAccountTransactionsData = {
    path: {
        id: string;
    };
    query?: {
        date_from?: string;
        date_to?: string;
    };
};

export type RetrieveAccountTransactionsResponse = (AccountTransactions);

export type RetrieveAccountTransactionsError = (ErrorResponse);

export type RetrieveAllEuAsForAnEndUserData = {
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial zero-based index from which to return the results.
         */
        offset?: number;
    };
};

export type RetrieveAllEuAsForAnEndUserResponse = (PaginatedEndUserAgreementList);

export type RetrieveAllEuAsForAnEndUserError = (ErrorResponse);

export type CreateEuaData = {
    body: EndUserAgreementRequest;
};

export type CreateEuaResponse = (EndUserAgreement);

export type CreateEuaError = (ErrorResponse);

export type RetrieveEuaByIdData = {
    path: {
        /**
         * A UUID string identifying this end user agreement.
         */
        id: string;
    };
};

export type RetrieveEuaByIdResponse = (EndUserAgreement);

export type RetrieveEuaByIdError = (ErrorResponse);

export type DeleteEuaByIdData = {
    path: {
        /**
         * A UUID string identifying this end user agreement.
         */
        id: string;
    };
};

export type AcceptEuaData = {
    body: EnduserAcceptanceDetailsRequest;
    path: {
        /**
         * A UUID string identifying this end user agreement.
         */
        id: string;
    };
};

export type AcceptEuaResponse = (EndUserAgreement);

export type AcceptEuaError = (ErrorResponse);

export type RetrieveAllSupportedInstitutionsInAGivenCountryData = {
    query?: {
        /**
         * Boolean value, indicating if access scopes are supported
         */
        access_scopes_supported?: string;
        /**
         * Boolean value, indicating if account selection is supported
         */
        account_selection_supported?: string;
        /**
         * Boolean value, indicating if business accounts are supported
         */
        business_accounts_supported?: string;
        /**
         * Boolean value, indicating if card accounts are supported
         */
        card_accounts_supported?: string;
        /**
         * Boolean value, indicating if corporate accounts are supported
         */
        corporate_accounts_supported?: string;
        /**
         * ISO 3166 two-character country code
         */
        country?: string;
        /**
         * Boolean value, indicating if payment submission is supported
         */
        payment_submission_supported?: string;
        /**
         * Boolean value, indicating if payments are supported
         */
        payments_enabled?: string;
        /**
         * Boolean value, indicating if pending transactions are supported
         */
        pending_transactions_supported?: string;
        /**
         * Boolean value, indicating if private accounts are supported
         */
        private_accounts_supported?: string;
        /**
         * Boolean value, indicating if debtor account can be read before submitting payment
         */
        read_debtor_account_supported?: string;
        /**
         * Boolean value, indicating if read refund account is supported
         */
        read_refund_account_supported?: string;
        /**
         * Boolean value, indicating if ssn verification is supported
         */
        ssn_verification_supported?: string;
    };
};

export type RetrieveAllSupportedInstitutionsInAGivenCountryResponse = (Array<Integration>);

export type RetrieveAllSupportedInstitutionsInAGivenCountryError = (ErrorResponse);

export type RetrieveInstitutionData = {
    path: {
        id: string;
    };
};

export type RetrieveInstitutionResponse = (IntegrationRetrieve);

export type RetrieveInstitutionError = (ErrorResponse);

export type RetrieveAllRequisitionsData = {
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial zero-based index from which to return the results.
         */
        offset?: number;
    };
};

export type RetrieveAllRequisitionsResponse = (PaginatedRequisitionList);

export type RetrieveAllRequisitionsError = (ErrorResponse);

export type CreateRequisitionData = {
    body: RequisitionRequest;
};

export type CreateRequisitionResponse = (SpectacularRequisition);

export type CreateRequisitionError = (ErrorResponse);

export type RequisitionByIdData = {
    path: {
        /**
         * A UUID string identifying this requisition.
         */
        id: string;
    };
};

export type RequisitionByIdResponse = (Requisition);

export type RequisitionByIdError = (ErrorResponse);

export type DeleteRequisitionByIdData = {
    path: {
        /**
         * A UUID string identifying this requisition.
         */
        id: string;
    };
};

export type ObtainNewAccessRefreshTokenPairData = {
    body: JWTObtainPairRequest;
};

export type ObtainNewAccessRefreshTokenPairResponse = (SpectacularJWTObtain);

export type ObtainNewAccessRefreshTokenPairError = (ErrorResponse);

export type GetANewAccessTokenData = {
    body: JWTRefreshRequest;
};

export type GetANewAccessTokenResponse = (SpectacularJWTRefresh);

export type GetANewAccessTokenError = (ErrorResponse);
// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-fetch";
import type {
  RetrieveAccountMetadataData,
  RetrieveAccountMetadataError,
  RetrieveAccountMetadataResponse,
  RetrieveAccountBalancesData,
  RetrieveAccountBalancesError,
  RetrieveAccountBalancesResponse,
  RetrieveAccountDetailsData,
  RetrieveAccountDetailsError,
  RetrieveAccountDetailsResponse,
  RetrieveAccountTransactionsData,
  RetrieveAccountTransactionsError,
  RetrieveAccountTransactionsResponse,
  RetrieveAllEuAsForAnEndUserData,
  RetrieveAllEuAsForAnEndUserError,
  RetrieveAllEuAsForAnEndUserResponse,
  CreateEuaData,
  CreateEuaError,
  CreateEuaResponse,
  RetrieveEuaByIdData,
  RetrieveEuaByIdError,
  RetrieveEuaByIdResponse,
  DeleteEuaByIdData,
  AcceptEuaData,
  AcceptEuaError,
  AcceptEuaResponse,
  RetrieveAllSupportedInstitutionsInAGivenCountryData,
  RetrieveAllSupportedInstitutionsInAGivenCountryError,
  RetrieveAllSupportedInstitutionsInAGivenCountryResponse,
  RetrieveInstitutionData,
  RetrieveInstitutionError,
  RetrieveInstitutionResponse,
  RetrieveAllRequisitionsData,
  RetrieveAllRequisitionsError,
  RetrieveAllRequisitionsResponse,
  CreateRequisitionData,
  CreateRequisitionError,
  CreateRequisitionResponse,
  RequisitionByIdData,
  RequisitionByIdError,
  RequisitionByIdResponse,
  DeleteRequisitionByIdData,
  ObtainNewAccessRefreshTokenPairData,
  ObtainNewAccessRefreshTokenPairError,
  ObtainNewAccessRefreshTokenPairResponse,
  GetANewAccessTokenData,
  GetANewAccessTokenError,
  GetANewAccessTokenResponse,
} from "./types.gen";

export const client = createClient(
  createConfig({
    baseUrl: "https://bankaccountdata.gocardless.com",
  })
);

/**
 * Access account metadata.
 *
 * Information about the account record, such as the processing status and IBAN.
 *
 * Account status is recalculated based on the error count in the latest req.
 */
export const retrieveAccountMetadata = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RetrieveAccountMetadataData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountMetadataResponse,
    RetrieveAccountMetadataError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/accounts/{id}/",
  });
};

/**
 * Access account balances.
 *
 * Balances will be returned in Berlin Group PSD2 format.
 */
export const retrieveAccountBalances = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RetrieveAccountBalancesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountBalancesResponse,
    RetrieveAccountBalancesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/accounts/{id}/balances/",
  });
};

/**
 * Access account details.
 *
 * Account details will be returned in Berlin Group PSD2 format.
 */
export const retrieveAccountDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RetrieveAccountDetailsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountDetailsResponse,
    RetrieveAccountDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/accounts/{id}/details/",
  });
};

/**
 * Access account transactions.
 *
 * Transactions will be returned in Berlin Group PSD2 format.
 */
export const retrieveAccountTransactions = <
  ThrowOnError extends boolean = false
>(
  options: OptionsLegacyParser<RetrieveAccountTransactionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAccountTransactionsResponse,
    RetrieveAccountTransactionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/accounts/{id}/transactions/",
  });
};

/**
 * Overwrite pagination to map CONN consent data with end user agreements.
 *
 * Args:
 * request (HttpRequest): Request
 *
 * Returns:
 * HttpResponse: Response
 */
export const retrieveAllEuAsForAnEndUser = <
  ThrowOnError extends boolean = false
>(
  options?: OptionsLegacyParser<RetrieveAllEuAsForAnEndUserData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAllEuAsForAnEndUserResponse,
    RetrieveAllEuAsForAnEndUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/agreements/enduser/",
  });
};

/**
 * API endpoints related to end-user agreements.
 */
export const createEua = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateEuaData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateEuaResponse,
    CreateEuaError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/agreements/enduser/",
  });
};

/**
 * Retrieve end user agreement by ID
 */
export const retrieveEuaById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RetrieveEuaByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveEuaByIdResponse,
    RetrieveEuaByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/agreements/enduser/{id}/",
  });
};

/**
 * Delete an end user agreement
 */
export const deleteEuaById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteEuaByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
    ...options,
    url: "/api/v2/agreements/enduser/{id}/",
  });
};

/**
 * Accept an end-user agreement via the API
 */
export const acceptEua = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AcceptEuaData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    AcceptEuaResponse,
    AcceptEuaError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/agreements/enduser/{id}/accept/",
  });
};

/**
 * List all available institutions
 */
export const retrieveAllSupportedInstitutionsInAGivenCountry = <
  ThrowOnError extends boolean = false
>(
  options?: OptionsLegacyParser<
    RetrieveAllSupportedInstitutionsInAGivenCountryData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    RetrieveAllSupportedInstitutionsInAGivenCountryResponse,
    RetrieveAllSupportedInstitutionsInAGivenCountryError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/institutions/",
  });
};

/**
 * Get details about a specific Institution and its supported features
 */
export const retrieveInstitution = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RetrieveInstitutionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveInstitutionResponse,
    RetrieveInstitutionError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/institutions/{id}/",
  });
};

/**
 * Retrieve all requisitions belonging to the company
 */
export const retrieveAllRequisitions = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<RetrieveAllRequisitionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RetrieveAllRequisitionsResponse,
    RetrieveAllRequisitionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/requisitions/",
  });
};

/**
 * Create a new requisition
 */
export const createRequisition = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateRequisitionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateRequisitionResponse,
    CreateRequisitionError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/requisitions/",
  });
};

/**
 * Retrieve a requisition by ID
 */
export const requisitionById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RequisitionByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RequisitionByIdResponse,
    RequisitionByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/requisitions/{id}/",
  });
};

/**
 * Delete requisition and its end user agreement
 */
export const deleteRequisitionById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteRequisitionByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
    ...options,
    url: "/api/v2/requisitions/{id}/",
  });
};

/**
 * Obtain JWT pair
 */
export const obtainNewAccessRefreshTokenPair = <
  ThrowOnError extends boolean = false
>(
  options: OptionsLegacyParser<
    ObtainNewAccessRefreshTokenPairData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    ObtainNewAccessRefreshTokenPairResponse,
    ObtainNewAccessRefreshTokenPairError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/token/new/",
  });
};

/**
 * Refresh access token
 */
export const getANewAccessToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetANewAccessTokenData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    GetANewAccessTokenResponse,
    GetANewAccessTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v2/token/refresh/",
  });
};
